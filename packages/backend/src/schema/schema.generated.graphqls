scalar DateTime

union Discovery = ResourceDiscovery

type Game {
  id: ID!
  name: String!
  players: [Player!]!
  starSystems: [StarSystem!]!
  startedAt: DateTime
  taskForces: [TaskForce!]!
}

type Mutation {
  createGame(name: String!): Game!
  createTaskForceCommision(starSystemId: ID!): TaskForceCommision!
  joinGame(id: ID!): Game!
  loginWithPassword(email: String!, password: String!): User!
  loginWithRefreshToken: User!
  moveTaskForce(id: ID!, position: Vector!): TaskForce!
  queueTaskForceMove(id: ID!, position: Vector!): TaskForce!
  registerWithPassword(email: String!, name: String!, password: String!): User!
  startGame(id: ID!): Game!
}

type Player {
  color: String!
  id: ID!
  name: String!
  user: User!
}

interface Positionable {
  id: ID!
  position: Vector!
}

type PositionableApppearsEvent {
  subject: Positionable!
}

type PositionableDisappearsEvent {
  subject: Positionable!
}

type PositionableMovesEvent {
  subject: Positionable!
}

type Query {
  game(id: ID!): Game!
  games: [Game!]!
  me: User
  starSystem(id: ID!): StarSystem!
  taskForceCommision(id: ID!): TaskForceCommision!
}

type Resource {
  id: ID!
  name: String!
}

type ResourceDepot {
  id: ID!
  quantity: Float!
  resource: Resource!
}

type ResourceDiscovery {
  id: ID!
  remainingDeposits: Float!
  resource: Resource!
}

interface SensorRange {
  id: ID!
  sensorRange: Float!
}

type StarSystem implements Positionable & SensorRange {
  discoveries: [Discovery!]!
  id: ID!
  name: String!
  owner: Player
  position: Vector!
  resourceDepots: [ResourceDepot!]!
  sensorRange: Float!
  taskForceCommisions: [TaskForceCommision!]!
  taskForces: [TaskForce!]!
}

type Subscription {
  taskForceCommisionFinished(id: ID!): TaskForceCommisionFinished!
  taskForceCommisionProgress(id: ID!): TaskForceCommision!
  trackGalaxy(gameId: ID!): TrackGalaxyEvent!
  trackStarSystem(starSystemId: ID!): TrackStarSystemEvent!
}

type TaskForce implements Positionable & SensorRange {
  game: Game!
  id: ID!
  movementVector: Vector
  name: String!
  orders: [TaskForceOrder!]!
  owner: Player!
  position: Vector!
  sensorRange: Float!
}

type TaskForceCommision {
  id: ID!
  progress: Float!
  total: Float!
}

type TaskForceCommisionFinished {
  id: ID!
  taskForce: TaskForce
}

type TaskForceCommisionProgressEvent {
  subject: TaskForceCommision!
}

type TaskForceMoveOrder implements TaskForceOrder {
  destination: Vector!
  id: ID!
  type: TaskForceOrderType!
}

interface TaskForceOrder {
  id: ID!
  type: TaskForceOrderType!
}

enum TaskForceOrderType {
  move
}

union TrackGalaxyEvent = PositionableApppearsEvent | PositionableDisappearsEvent | PositionableMovesEvent

union TrackStarSystemEvent = TaskForceCommisionProgressEvent

type User {
  email: String!
  id: ID!
  name: String!
}

scalar Vector