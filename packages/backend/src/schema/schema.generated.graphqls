scalar BigInt

scalar DateTime

union Discovery = ResourceDiscovery | UnknownDiscovery

type Game {
  id: ID!
  me: Player
  name: String!
  players: [Player!]!
  resources: [Resource!]!
  shipComponents: [ShipComponent!]!
  shipDesigns: [ShipDesign!]!
  starSystems: [StarSystem!]!
  startedAt: DateTime
  taskForces: [TaskForce!]!
  tickRate: Int!
}

type Mutation {
  createGame(name: String!): Game!
  createShipDesign(design: ShipDesignInput!, gameId: ID!): ShipDesign!
  createTaskForceCommision(commision: TaskForceCommisionInput!): TaskForce!
  joinGame(id: ID!): Game!
  loginWithPassword(email: String!, password: String!): User!
  loginWithRefreshToken: User!
  orderTaskForce(id: ID!, orders: [TaskForceOrderInput!]!, queue: Boolean): TaskForce!
  registerWithPassword(email: String!, name: String!, password: String!): User!
  startGame(id: ID!): Game!
}

type Player {
  color: String!
  id: ID!
  name: String!
  resources: [Resource!]!
  shipComponents: [ShipComponent!]!
  shipDesigns: [ShipDesign!]!
  user: User!
}

type Population {
  amount: BigInt!
  id: ID!
}

interface Positionable {
  id: ID!
  position: Vector!
}

type PositionableApppearsEvent {
  subject: Positionable!
}

type PositionableDisappearsEvent {
  subject: Positionable!
}

type PositionableMovesEvent {
  subject: Positionable!
}

type Query {
  game(id: ID!): Game!
  games: [Game!]!
  me: User
  starSystem(id: ID!): StarSystem!
  taskForceShipCommision(id: ID!): TaskForceShipCommision!
}

type Resource {
  id: ID!
  name: String!
}

type ResourceCost {
  quantity: Float!
  resource: Resource!
}

type ResourceDepot {
  id: ID!
  quantity: Float!
  resource: Resource!
}

type ResourceDiscovery {
  id: ID!
  miningRate: Float!
  remainingDeposits: Float!
  resource: Resource!
}

type ResourceNeed {
  alotted: Float!
  needed: Float!
  resource: Resource!
}

type ShipComponent {
  armorEffectivenessAgainst: [ShipComponentEffectivenessAgainst!]
  armorThickness: Float
  constructionCost: Float!
  costs: [ResourceCost!]!
  crewCapacity: Float
  crewNeed: Float!
  description: String!
  ftlSpeed: Float
  hullBoost: Float
  id: ID!
  name: String!
  powerGeneration: Float
  powerNeed: Float!
  sensorPrecision: Float
  sensorRange: Float
  shieldEffectivenessAgainst: [ShipComponentEffectivenessAgainst!]
  shieldStrength: Float
  supplyCapacity: Float
  supplyNeedCombat: Float!
  supplyNeedMovement: Float!
  supplyNeedPassive: Float!
  thruster: Float
  weaponAccuracy: Float
  weaponArmorPenetration: Float
  weaponCooldown: Float
  weaponDamage: Float
  weaponDeliveryType: WeaponDeliveryType
  weaponRange: Float
  weaponShieldPenetration: Float
  zoneOfControl: Float
}

type ShipComponentEffectivenessAgainst {
  deliveryType: WeaponDeliveryType!
  effectiveness: Float!
}

type ShipDesign {
  components: [ShipComponent!]!
  costs: [ResourceCost!]!
  decommissioned: Boolean!
  description: String!
  id: ID!
  name: String!
  owner: Player!
  previousDesign: ShipDesign
}

input ShipDesignInput {
  componentIds: [ID!]!
  description: String!
  name: String!
  previousDesignId: ID
  resourceId: ID!
}

type StarSystem implements Positionable {
  discoveries: [Discovery!]
  discoveryProgress: Float
  id: ID!
  isVisible: Boolean!
  lastUpdate: DateTime
  name: String!
  owner: Player
  populations: [Population!]
  position: Vector!
  resourceDepots: [ResourceDepot!]
  sensorRange: Float
  taskForceShipCommisions: [TaskForceShipCommision!]!
  taskForces: [TaskForce!]!
}

type StarSystemUpdateEvent {
  subject: StarSystem!
}

type Subscription {
  trackGalaxy(gameId: ID!): TrackGalaxyEvent!
  trackStarSystem(starSystemId: ID!): TrackStarSystemEvent!
}

type TaskForce implements Positionable {
  commisions: [TaskForceShipCommision!]!
  game: Game!
  id: ID!
  isVisible: Boolean!
  lastUpdate: DateTime
  movementVector: Vector
  name: String!
  orders: [TaskForceOrder!]
  owner: Player
  position: Vector!
  sensorRange: Float
  ships: [TaskForceShip!]!
}

type TaskForceColonizeOrder implements TaskForceOrder {
  id: ID!
}

input TaskForceCommisionInput {
  name: String!
  ships: [TaskForceCommisionShipInput!]!
  starSystemId: ID!
}

input TaskForceCommisionShipInput {
  name: String!
  role: TaskForceShipRole!
  shipDesignId: ID!
}

type TaskForceFollowOrder implements TaskForceOrder {
  id: ID!
  taskForce: TaskForce!
}

input TaskForceFollowOrderInput {
  taskForceId: ID!
}

type TaskForceMoveOrder implements TaskForceOrder {
  destination: Vector!
  id: ID!
}

input TaskForceMoveOrderInput {
  destination: Vector!
}

interface TaskForceOrder {
  id: ID!
}

input TaskForceOrderInput {
  colonize: Boolean
  follow: TaskForceFollowOrderInput
  move: TaskForceMoveOrderInput
}

type TaskForceShip {
  armorState: Float!
  hullState: Float!
  id: ID!
  name: String!
  role: TaskForceShipRole!
  shieldState: Float!
  shipDesign: ShipDesign!
  supplyCarried: Float!
  weaponState: Float!
}

type TaskForceShipCommision {
  id: ID!
  name: String!
  resourceNeeds: [ResourceNeed!]!
  role: TaskForceShipRole!
  shipDesign: ShipDesign!
}

enum TaskForceShipRole {
  capital
  screen
  support
}

union TrackGalaxyEvent = PositionableApppearsEvent | PositionableDisappearsEvent | PositionableMovesEvent | StarSystemUpdateEvent

union TrackStarSystemEvent = StarSystemUpdateEvent

type UnknownDiscovery {
  id: ID!
}

type User {
  email: String!
  id: ID!
  name: String!
}

scalar Vector

enum WeaponDeliveryType {
  beam
  instant
  missile
  projectile
}