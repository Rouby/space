scalar DateTime

type Game {
  id: ID!
  name: String!
  players: [Player!]!
  starSystems: [StarSystem!]!
  startedAt: DateTime
  taskForces: [TaskForce!]!
}

type Mutation {
  createGame(name: String!): Game!
  createTaskForceCommision(starSystemId: ID!): TaskForceCommision!
  joinGame(id: ID!): Game!
  loginWithPassword(email: String!, password: String!): User!
  loginWithRefreshToken: User!
  moveTaskForce(id: ID!, position: Vector!): TaskForce!
  queueTaskForceMove(id: ID!, position: Vector!): TaskForce!
  registerWithPassword(email: String!, name: String!, password: String!): User!
  startGame(id: ID!): Game!
}

type Player {
  color: String!
  id: ID!
  name: String!
  user: User!
}

interface Positionable {
  id: ID!
  position: Vector!
}

type Query {
  game(id: ID!): Game!
  games: [Game!]!
  me: User
  starSystem(id: ID!): StarSystem!
  taskForceCommision(id: ID!): TaskForceCommision!
}

type StarSystem implements Positionable {
  id: ID!
  name: String!
  owner: Player
  position: Vector!
  taskForceCommisions: [TaskForceCommision!]!
  taskForces: [TaskForce!]!
}

type Subscription {
  taskForceCommisionFinished(id: ID!): TaskForceCommisionFinished!
  taskForceCommisionProgress(id: ID!): TaskForceCommision!
  trackGalaxy(gameId: ID!): TrackEvent!
}

type TaskForce implements Positionable {
  game: Game!
  id: ID!
  movementVector: Vector
  name: String!
  orders: [TaskForceOrder!]!
  owner: Player!
  position: Vector!
}

type TaskForceCommision {
  id: ID!
  progress: Float!
  total: Float!
}

type TaskForceCommisionFinished {
  id: ID!
  taskForce: TaskForce
}

type TaskForceMoveOrder implements TaskForceOrder {
  destination: Vector!
  id: ID!
  type: TaskForceOrderType!
}

interface TaskForceOrder {
  id: ID!
  type: TaskForceOrderType!
}

enum TaskForceOrderType {
  move
}

type TrackEvent {
  subject: Positionable!
  type: TrackEventType!
}

enum TrackEventType {
  appear
  disappear
  update
}

type User {
  email: String!
  id: ID!
  name: String!
}

scalar Vector