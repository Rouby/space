enum TaskForceShipRole {
	capital
	screen
	carrier
	scout
	support
	transport
}

type TaskForce implements Positionable {
	id: ID!
	name: String!
	position: Vector!
	orders: [TaskForceOrder!]
	movementVector: Vector
	owner: Player
	game: Game!
	sensorRange: Float
	ships: [TaskForceShip!]!
	commisions: [TaskForceShipCommision!]!
	isVisible: Boolean!
	lastUpdate: DateTime
}

type TaskForceShip {
	id: ID!
	name: String!
	role: TaskForceShipRole!
	shipDesign: ShipDesign!

	hullState: Float!
	shieldState: Float!
	armorState: Float!
	weaponState: Float!
	supplyCarried: Float!
}

type TaskForceShipCommision {
	id: ID!
	name: String!
	role: TaskForceShipRole!
	shipDesign: ShipDesign!

	resourceNeeds: [ResourceNeed!]!
}

interface TaskForceOrder {
	id: ID!
}

type TaskForceMoveOrder implements TaskForceOrder {
	id: ID!
	destination: Vector!
}

extend type Game {
	taskForces: [TaskForce!]!
}

extend type StarSystem {
	taskForceShipCommisions: [TaskForceShipCommision!]!
	taskForces: [TaskForce!]!
}

type Query {
	taskForceShipCommision(id: ID!): TaskForceShipCommision!
}

input TaskForceCommisionInput {
	starSystemId: ID!
	name: String!
	ships: [TaskForceCommisionShipInput!]!
}

input TaskForceCommisionShipInput {
	name: String!
	role: TaskForceShipRole!
	shipDesignId: ID!
}

type Mutation {
	createTaskForceCommision(commision: TaskForceCommisionInput!): TaskForce!

	moveTaskForce(id: ID!, position: Vector!): TaskForce!
	queueTaskForceMove(id: ID!, position: Vector!): TaskForce!
}
