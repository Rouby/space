enum TaskForceShipRole {
	capital
	screen
	support
}

type TaskForce implements Positionable {
	id: ID!
	name: String!
	position: Vector!
	orders: [TaskForceOrder!]
	movementVector: Vector
	owner: Player
	game: Game!
	sensorRange: Float
	ships: [TaskForceShip!]!
	commisions: [TaskForceShipCommision!]!
	isVisible: Boolean!
	lastUpdate: DateTime
}

type TaskForceShip {
	id: ID!
	name: String!
	role: TaskForceShipRole!
	shipDesign: ShipDesign!

	supplyCarried: Float!
}

type TaskForceShipCommision {
	id: ID!
	name: String!
	role: TaskForceShipRole!
	shipDesign: ShipDesign!

	resourceNeeds: [ResourceNeed!]!
}

interface TaskForceOrder {
	id: ID!
}

type TaskForceMoveOrder implements TaskForceOrder {
	id: ID!
	destination: Vector!
}

type TaskForceFollowOrder implements TaskForceOrder {
	id: ID!
	taskForce: TaskForce!
}

type TaskForceColonizeOrder implements TaskForceOrder {
	id: ID!
}

extend type Game {
	taskForces: [TaskForce!]!
}

extend type StarSystem {
	taskForceShipCommisions: [TaskForceShipCommision!]!
	taskForces: [TaskForce!]!
}

type Query {
	taskForceShipCommision(id: ID!): TaskForceShipCommision!
}

input TaskForceCommisionInput {
	starSystemId: ID!
	name: String!
	ships: [TaskForceCommisionShipInput!]!
}

input TaskForceCommisionShipInput {
	name: String!
	role: TaskForceShipRole!
	shipDesignId: ID!
}

input TaskForceOrderInput {
	move: TaskForceMoveOrderInput
	follow: TaskForceFollowOrderInput
	colonize: Boolean
}

input TaskForceMoveOrderInput {
	destination: Vector!
}

input TaskForceFollowOrderInput {
	taskForceId: ID!
}

type Mutation {
	createTaskForceCommision(commision: TaskForceCommisionInput!): TaskForce!

	orderTaskForce(
		id: ID!
		orders: [TaskForceOrderInput!]!
		queue: Boolean
	): TaskForce!
}
